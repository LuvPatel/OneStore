Parameters:
  StageName:
    Type: String
    Default: "dev"
    Description: "The stage name for the API Gateway."

Resources:
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: onestore-drive
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  MyPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
               AWS: arn:aws:iam::683277040625:role/LabRole
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Resource:
              Fn::Sub: "arn:aws:s3:::${S3Bucket}/*"

  OneStoreConfirmUserLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: cloud-OneStoreConfirmUser
        Handler: lambda_function.lambda_handler
        Role: arn:aws:iam::683277040625:role/LabRole
        Code:
          S3Bucket: cfbucketonestore
          S3Key: OneStoreConfirmUser.zip
        Runtime: python3.12
        Timeout: 60
        Environment:
          Variables:
            BUCKET_NAME:
              Ref: S3Bucket

  OneStoreUploadFileLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: cloud-OneStoreUploadFIle
        Handler: lambda_function.lambda_handler
        Role: arn:aws:iam::683277040625:role/LabRole
        Code:
          S3Bucket: cfbucketonestore
          S3Key: OneStoreUploadFIle.zip
        Runtime: python3.12
        Timeout: 60
        Environment:
          Variables:
            BUCKET_NAME:
              Ref: S3Bucket
      
  OneStoreListFilesLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: cloud-OneStoreListFiles
        Handler: lambda_function.lambda_handler
        Role: arn:aws:iam::683277040625:role/LabRole
        Code:
          S3Bucket: cfbucketonestore
          S3Key: OneStoreListFiles.zip
        Runtime: python3.12
        Timeout: 60
        Environment:
          Variables:
            BUCKET_NAME:
              Ref: S3Bucket
  
  OneStoreDeleteFileLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: cloud-OneStoreDeleteFile
        Handler: lambda_function.lambda_handler
        Role: arn:aws:iam::683277040625:role/LabRole
        Code:
          S3Bucket: cfbucketonestore
          S3Key: OneStoreDeleteFile.zip
        Runtime: python3.12
        Timeout: 60
        Environment:
          Variables:
            BUCKET_NAME:
              Ref: S3Bucket
  
  OneStoreSendNotificationLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: cloud-OneStoreSendNotification
        Handler: lambda_function.lambda_handler
        Role: arn:aws:iam::683277040625:role/LabRole
        Code:
          S3Bucket: cfbucketonestore
          S3Key: OneStoreSendNotification.zip
        Runtime: python3.12
        Timeout: 60
        Environment:
          Variables:
            TOPIC_ARN:
              Ref: SNSTopic
  

  OneStoreUploadFileNotificationLambda:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: cloud-OneStoreUploadFileNotification
        Handler: lambda_function.lambda_handler
        Role: arn:aws:iam::683277040625:role/LabRole
        Code:
          S3Bucket: cfbucketonestore
          S3Key: OneStoreUploadFileNotification.zip
        Runtime: python3.12
        Timeout: 60
        Environment:
          Variables:
            TOPIC_ARN:
              Ref: SNSTopic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: CloudOneStore
      FifoTopic: false
      TopicName: cloud-user-registration-topic

  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: luvpatel3376@gmail.com
      TopicArn: !Ref SNSTopic

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref SNSTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::683277040625:role/LabRole
            Action: sns:Subscribe
            Resource: !Ref SNSTopic

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: cloudonestoreapi
      Description: API Gateway for OneStore application
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  # API Gateway Resource - /confirmUser
  ApiGatewayResourceConfirmUser:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: confirmUser
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway Resource - /deleteFile
  ApiGatewayResourceDeleteFile:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: deleteFile
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway Resource - /listFiles
  ApiGatewayResourceListFiles:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: listFiles
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway Resource - /uploadFile
  ApiGatewayResourceUploadFile:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: uploadFile
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway Resource - /uploadMail
  ApiGatewayResourceUploadMail:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: uploadMail
      RestApiId: !Ref ApiGatewayRestApi

  # API Gateway Method - /confirmUser - POST
  ApiGatewayMethodConfirmUserPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResourceConfirmUser
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Credentials: arn:aws:iam::683277040625:role/LabRole
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - { LambdaArn: !GetAtt OneStoreConfirmUserLambda.Arn }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Content-Type: true 
          ResponseModels:
              application/json: "Empty"

  # API Gateway Method - /confirmUser - OPTIONS
  ApiGatewayMethodConfirmUserOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayResourceConfirmUser
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK 
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: "Empty"


  # API Gateway Method - /deleteFile - POST
  ApiGatewayMethodDeleteFilePost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResourceDeleteFile
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Credentials: arn:aws:iam::683277040625:role/LabRole
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - { LambdaArn: !GetAtt OneStoreDeleteFileLambda.Arn }
        RequestTemplates:
            application/json: ""
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,access-control-allow-credentials'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
              application/json: "Empty" 

  # API Gateway Method - /deleteFile - OPTIONS
  ApiGatewayMethodDeleteFileOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayResourceDeleteFile
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK  
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: "Empty"


  # API Gateway Method - /listFiles - GET
  ApiGatewayMethodListFilesGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResourceListFiles
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Credentials: arn:aws:iam::683277040625:role/LabRole
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - { LambdaArn: !GetAtt OneStoreListFilesLambda.Arn }
        RequestParameters:
          integration.request.querystring.userId: 'method.request.querystring.userId'
        RequestTemplates:
          application/json: |
            {
              "queryStringParameters": {
                "userId": "$input.params('userId')"
              }
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'
      RequestParameters:
        method.request.querystring.userId: true

  # API Gateway Method - /listFiles - OPTIONS
  ApiGatewayMethodListFilesOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayResourceListFiles
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK  
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
          ResponseModels:
            application/json: "Empty"


  # API Gateway Method - /uploadFile - POST
  ApiGatewayMethodUploadFilePost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResourceUploadFile
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Credentials: arn:aws:iam::683277040625:role/LabRole
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - { LambdaArn: !GetAtt OneStoreUploadFileLambda.Arn }
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Credentials: "'true'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,access-control-allow-credentials'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Credentials: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  # API Gateway Method - /uploadFile - OPTIONS
  ApiGatewayMethodUploadFileOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayResourceUploadFile
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'


  # API Gateway Method - /uploadMail - POST
  ApiGatewayMethodUploadMailPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResourceUploadMail
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Credentials: arn:aws:iam::683277040625:role/LabRole
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          Fn::Sub:
            - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
            - { LambdaArn: !GetAtt OneStoreUploadFileNotificationLambda.Arn }
        RequestTemplates:
          application/json: ""
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'
      RequestParameters:
        method.request.header.Access-Control-Allow-Origin: false

  # API Gateway Method - /uploadMail - OPTIONS
  ApiGatewayMethodUploadMailOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayResourceUploadMail
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: 'Empty'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref StageName
    DependsOn:
      - ApiGatewayMethodConfirmUserPost
      - ApiGatewayMethodDeleteFilePost
      - ApiGatewayMethodListFilesGet
      - ApiGatewayMethodUploadFilePost
      - ApiGatewayMethodUploadMailPost
      - ApiGatewayMethodUploadMailOptions
      - ApiGatewayMethodUploadFileOptions
      - ApiGatewayMethodListFilesOptions
      - ApiGatewayMethodDeleteFileOptions
      - ApiGatewayMethodConfirmUserOptions

  # Lambda Permissions for API Gateway
  LambdaPermissionForApiGatewayConfirmUser:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OneStoreConfirmUserLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/confirmUser

  # Lambda Permissions for API Gateway
  LambdaPermissionForApiGatewayDeleteFile:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OneStoreDeleteFileLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/deleteFile

  LambdaPermissionForApiGatewayListFiles:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OneStoreListFilesLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/listFiles

  # Permission for UploadFile Lambda
  LambdaPermissionForApiGatewayUploadFile:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OneStoreUploadFileLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/uploadFile

  # Permission for UploadMail Lambda
  LambdaPermissionForApiGatewayUploadMail:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OneStoreUploadFileNotificationLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/uploadMail

  LambdaPermissionForCognitoPostConfirmation:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt OneStoreSendNotificationLambda.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}


  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: cloud-register-users
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      DeletionProtection: ACTIVE
      LambdaConfig:
        PostConfirmation: !GetAtt OneStoreSendNotificationLambda.Arn

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cloud-auth-client
      UserPoolId:
        Ref: CognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - phone
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - !Sub 'http://localhost:3000'
      LogoutURLs:
        - !Sub 'http://localhost:3000'
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      EnableTokenRevocation: true

  # Cognito User Pool Domain
  OneStoreCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: cloud-domain
      UserPoolId:
        Ref: CognitoUserPool

  # User Pool UI Customization
  UserPoolUICustomization:
    Type: AWS::Cognito::UserPoolUICustomizationAttachment
    DependsOn: OneStoreCognitoUserPoolDomain
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      ClientId: 'ALL'
  
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: CloudMyVPC

  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: us-east-1a
      Tags:
        - Key: Name
          Value: CloudSubnet

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CloudMyInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: CloudMyRouteTable

  MyRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MySubnet
      RouteTableId: !Ref MyRouteTable

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: MySecurityGroup
      GroupDescription: Allow SSH, HTTP, and HTTPS traffic
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: CloudMySecurityGroup
  
  MyExistingInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - "LabRole"

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      ImageId: ami-0ba9883b710b05ac6
      KeyName: onestore
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref MySubnet
          GroupSet:
            - !Ref MySecurityGroup
      IamInstanceProfile: !Ref MyExistingInstanceProfile
      Tags:
        - Key: Name
          Value: CloudMyEC2Instance
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            # Update and install Docker
            sudo yum update -y

            sudo yum install docker -y
            sudo service docker start
            sudo systemctl enable docker

            sudo apt install python3-pip
            sudo yum install -y jq

            # Add those removed lines here

            # Pull the Docker image from Docker Hub
            sudo docker pull luvpatel/onestore:v6

            sudo docker run -d -p 3000:3000 \
              -e REACT_APP_CLIENT_ID=${CognitoUserPoolClient} \
              -e REACT_APP_USER_POOL_ID=${CognitoUserPool} \
              -e REACT_APP_API_URL=https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName} \
              -e REACT_APP_SECRET_KEY="b25lc3RvcmU=" \
              -e REACT_APP_REGION="us-east-1" \
              luvpatel/onestore:v6

Outputs:
  CloudApiUrl:
    Description: "URL of the API Gateway"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
    Export:
      Name: CloudApiUrl

  CloudOneStoreUserPoolId:
    Value:
      Ref: CognitoUserPool
    Export:
      Name: CloudOneStoreUserPoolId

  CloudOneStoreUserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient
    Export:
      Name: CloudOneStoreUserPoolClientId

  CloudOneStoreUserPoolDomain:
    Value: !Sub 'https://${OneStoreCognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: CloudOneStoreUserPoolDomain
  CloudBucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket
    Export:
      Name: CloudBucketName
  CloudBucketArn:
    Description: ARN of the S3 bucket
    Value: !GetAtt S3Bucket.Arn
  CloudSecretKey:
    Value: "b25lc3RvcmU="
    Export:
      Name: CloudSecretKey
  CloudAppRegion:
    Value : "us-east-1"
    Export:
      Name: CloudAppRegion
  CloudInstancePublicIP:
    Description: 'Public IP address of the EC2 instance to access OneStore'
    Value: !Sub 'http://${MyEC2Instance.PublicIp}:3000'